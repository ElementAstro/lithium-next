[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "wifi-hotspot-manager"
version = "2.0.0"
description = "A comprehensive utility for managing WiFi hotspots on Linux systems using NetworkManager with modern Python features"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "WiFi Hotspot Manager Team", email = "info@example.com" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    "loguru>=0.7.0",
    "typing-extensions>=4.8.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "asyncio-mqtt>=0.13.0; extra == 'mqtt'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "pre-commit>=3.4.0",
]

pybind = ["pybind11>=2.11.0", "nanobind>=1.6.0"]
mqtt = ["asyncio-mqtt>=0.13.0", "paho-mqtt>=1.6.0"]
monitoring = ["psutil>=5.9.0", "prometheus-client>=0.17.0"]
all = ["wifi-hotspot-manager[pybind,mqtt,monitoring]"]

[project.urls]
Homepage = "https://github.com/username/wifi-hotspot-manager"
Issues = "https://github.com/username/wifi-hotspot-manager/issues"
Documentation = "https://wifi-hotspot-manager.readthedocs.io/"
Repository = "https://github.com/username/wifi-hotspot-manager.git"
Changelog = "https://github.com/username/wifi-hotspot-manager/blob/main/CHANGELOG.md"

[project.scripts]
wifi-hotspot = "wifi_hotspot_manager.cli:main"
hotspot-manager = "wifi_hotspot_manager.cli:main"

[tool.setuptools]
package-dir = { "" = "." }
packages = ["hotspot"]

[tool.setuptools.dynamic]
version = { attr = "hotspot.__version__" }

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--cov=hotspot",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_subclassing_any = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["hotspot"]
known_third_party = ["loguru", "pydantic", "rich"]

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG", "PLR2004"]

[tool.coverage.run]
source = ["hotspot"]
omit = ["tests/*", "*/tests/*", "*/__pycache__/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "@overload",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"
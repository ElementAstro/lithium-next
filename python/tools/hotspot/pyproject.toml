[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wifi-hotspot-manager"
version = "1.0.0"
description = "A comprehensive utility for managing WiFi hotspots on Linux systems using NetworkManager"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "WiFi Hotspot Manager Team", email = "info@example.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: System :: Networking",
    "Topic :: Utilities",
]
dependencies = ["loguru>=0.7.0", "typing-extensions>=4.0.0"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]

pybind = ["pybind11>=2.10.0"]

[project.urls]
Homepage = "https://github.com/username/wifi-hotspot-manager"
Issues = "https://github.com/username/wifi-hotspot-manager/issues"
Documentation = "https://wifi-hotspot-manager.readthedocs.io/"

[project.scripts]
wifi-hotspot = "wifi_hotspot_manager.cli:main"

[tool.setuptools]
package-dir = { "" = "src" }
packages = ["wifi_hotspot_manager"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--cov=wifi_hotspot_manager"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true

[tool.coverage.run]
source = ["wifi_hotspot_manager"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
